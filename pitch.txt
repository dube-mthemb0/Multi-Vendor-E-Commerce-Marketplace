multi-vendor e-commerce marketplace from scratch using Laravel, React with TypeScript, Tailwindcss with DaisyUI, FilamentPHP and Stripe online payments.
@sendmeapp

composer require laravel/breeze --dev
2. Then install breeze separately using "composer require laravel/breeze"
3. Then execute "php artisan breeze:install" and choose "React with Inertia.For adding react, typscript, and ssr
composer require laravel/breeze --dev
php artisan breeze:install react --typescript --ssr
npm install
php artisan migrate
php artisan storage:link

npm run dev | php artisan serve
 Define two folders in components the Core{reusable components} and the App{for everything specific to this project i.e the logo}
git init
 tailwindconfig.js remove forms & npm uninstall @tailwindcss/forms | require('daisyui')
Login.tsx

update the function Authenrticate to AuthenticatedLayout
#NB moving between the pages is slow because we dont have the ssr running yet
im app i have created Navbar.tsx file 
now i am creating the hero section

spatie laravel package for creating user roles and permission
composer require spatie/laravel-permission
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
php artisan optimize:clear
php artisan config:clear

in user.php add use HasRoles; then go back to the spatie laravel documentation
{ctrl*2 in php Storm}
php artisan make:class RolesEnum
php artisan make:class PermissionsEnum
{shift*2 to search}
edit the classes to enums and remove the constructors
with roles and permissions set up
open seeders 
php artisan make:seeder RoleSeeder
php artisan make:seeder UserSeeder
  
we now have the permissions the roles we are going to now synchronize the permissions
now we create the enums folder in the app directory to put enums and php storms refactors cool!!
php artisan migrate:fresh --seed
dont forget to import use App\Models\User;
committ "install spatie laravel package and implenting role-based access control (RBAC) using Spatie"

Now we are moving on to use Filament doc,
composer require filament/filament dont put the version it has some issues
php artisan filament:install --panels
now we must fix middleware access t the filament admin pan.

php artisan migrate:fresh --seed
 php artisan route:list
changed route(filament.admin.pages.dashboard )
php artisan make:model Department -m
php artisan make:filament-resource Department
php artisan make:filament-relation-manager DepartmentResource categories name

   INFO  Filament relation manager [C:/xampp/htdocs/pitch-react-platform/app/Fil
ament/Resources/DepartmentResource/RelationManagers/CategoriesRelationManager.ph
p] created successfully.  

   INFO  Make sure to register the relation in `DepartmentResource::getRelations
()`.
php artisan make:filament-resource Department
C

Category.php to register 
now we will proceed to make seeders for the Departments
php artisan make:seeder DepartmentSeeder
php artisan make:seeder CategorySeeder
on Database seeder we now add the seeder classes
 populated the seeders
php artisan migrate:fresh --seed

going to the vendor side
php artisan make:model Product -mc
we need the model and the controller

php artisan make:enum Enums\ProductStatusEnum
php artisan make:filament-resource Product

now we will go to create-products-table to update it for the migration
we then go to the newly created ProductStatusEnum
next we find the product model and define belongs to relations
now we go to ProductResource.php
we then migrate the products table



####NB We copy the filament from DepartmentResource to product and update it to only vendors have oversight??!! We will come back to this later####


we now want the products to display from the table , from the ProductResource

filament spatie media library to allow for polymeric images o any table
the command composer require filament/spatie-laravel-media-library-plugin
next we publish the migration files php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-migrations"
our model is product.php

Now we start queue for our images php artisan queue listen
we then publish the config file php artisan vendor:publish --provider="Spatie\MediaLibrary\MediaLibraryServiceProvider" --tag="medialibrary-config"
we then create a new class App/Services

We are now moving on to the fun part of product variation
php artisan make:model VariationType
php artisan make:model VariationTypeOption
php artisan make:model ProductVariation -m
 php artisan migrate

php artisan make:enum Enums\ProductVariationTypes